# Config file for an example Majora's Mask: Recompiled mod.

# Fields that end up in the mod's manifest.
[manifest]

# Unique ID of this mod. Pick something long enough that it'll never be the same as any other mod.
# The name displayed in the mod management menu is separate from this so this doesn't need to be human readable.
id = "mm_recomp_mod_template"

# Version of this mod.
version = "1.0.0"

# The name that will show up for this mod in the mod menu. This should be human readable.
display_name = "MM Recomp Mod Template"

# The description that will show up when this mod is displayed in the mod menu. This should be human readable.
description =  """
This is an example mod for Majora's Mask: Recompiled that can be used as a template for creating mods. \
When this mod is enabled, you will always perform a quickspin when swinging your sword.

For more details, see https://github.com/Zelda64Recomp/MMRecompModTemplate."""

# A short description that will show up in this mod's entry in the mod list. This should be human readable and kept short
# to prevent it from being cut off due to the limited space.
short_description = "This is an example mod for Majora's Mask: Recompiled."

# Authors of this mod.
authors = [ "Your name here" ]

# ID of the target recomp game.
game_id = "mm"

# Minimum version of the target recomp (e.g. Zelda 64: Recompiled) that this mod can run on.
minimum_recomp_version = "1.2.0"

# Dependency mods. Each entry is the mod's ID and then an optional minimum version of the dependency mod.
dependencies = [
# Example dependency:
#    "modname:1.0.0"
]

# Native libraries (e.g. DLLs) and the functions they export.
native_libraries = [
# Example native library:
   { name = "mm_recomp_mod_template_extlib", funcs = ["native_lib_test"] }
]

# Inputs to the mod tool.
[inputs]

# Input elf file to generate a mod from.
elf_path = "build/mod.elf"

# Output mod filename.
mod_filename = "mm_recomp_mod_template"

# Reference symbol files.
func_reference_syms_file = "Zelda64RecompSyms/mm.us.rev1.syms.toml"
data_reference_syms_files = [ "Zelda64RecompSyms/mm.us.rev1.datasyms.toml", "Zelda64RecompSyms/mm.us.rev1.datasyms_static.toml" ]

# Additional files to include in the mod.
additional_files = [ ]

# Info for building the extlib. If this mod will have no extlib, remove this section and
# the build scripts disable extlib compilation and packaging. You can then safely delete 
# ./CMakeLists.txt, ./CMakePresets.json, and ./src/extlib/**
[extlib_compiling]

# # Name of the extlib. This information is passed to CMake as the target name for the extlib.
library_name = "mm_recomp_mod_template_extlib"

# Your CMake presets in this file should be designed to handle cross-compilation (using the provided
# Zig toolchain is recommended). When building the mod, CMake will be invoked 3 times to build
# extlib binaries for Windows, Macos, and Linux. The presets below are used to contruct 
# `user_build_config.json` (if it isn't present already), which is read to determine what CMake
# presets to use. The presets are organized in to groups, with each group containing "Windows", 
# "Macos", "Linux", and "Native" presets (more on the native preset below). The "Debug" preset group
# is the default, and the "Release" group is used by `create_thunderstore_package.py` when creating
# the Thunderstore release. You can also add more groups, using the make variable `EXTLIB_CMAKE_PRESET_GROUP`
# to choose the group when invoking make. You can change the presets in `user_build_config.json` in order use 
# build with non-default presets locally (presets from `CMakeUserPresets.json`, for example) without modifying 
# defaults here.

# "Native" presets are for building your mod using your local system tools/toolchain instead of cross-compilation. 
# This can be a useful feature for debugging. The build scripts will automatically select default native
# presets suitable for your system when creating your `user_build_config.json` file, and you can easily
# add new presets to `CMakePresets.json` or `CMakeUserPresets.json` for further expansion. Use `make native`
# to run a native build. You can also select what presets you wish to use for your native build by assigning
# the make variables `NATIVE_CMAKE_CONFIGURE_PRESET` and `NATIVE_CMAKE_BUILD_PRESET`.

# CMake presets for Debug builds. 
windows_debug_configure_preset = "zig-windows-x64-Debug"
windows_debug_build_preset = "zig-windows-x64-Debug"

macos_debug_configure_preset = "zig-macos-aarch64-Debug"
macos_debug_build_preset = "zig-macos-aarch64-Debug"

linux_debug_configure_preset = "zig-linux-x64-Debug"
linux_debug_build_preset = "zig-linux-x64-Debug"

# CMake presets for Release builds. Used to contruct preset groups in `user_build_config.json`.
windows_release_configure_preset = "zig-windows-x64-Release"
windows_release_build_preset = "zig-windows-x64-Release"

macos_release_configure_preset = "zig-macos-aarch64-Release"
macos_release_build_preset = "zig-macos-aarch64-Release"

linux_release_configure_preset = "zig-linux-x64-Release"
linux_release_build_preset = "zig-linux-x64-Release"

# Mod config options
[[manifest.config_options]]
id = "enum_option"
name = "Enum Option"
description = "Test enum config option"
type = "Enum"
options = [ "First", "Second" ]
default = "First"

[[manifest.config_options]]
id = "number_option"
name = "Number Option"
description = "Test number config option."
type = "Number"
min = 0
max = 10
step = 0.1
precision = 1
percent = false
default = 1

[[manifest.config_options]]
id = "string_option"
name = "String Option"
description = "Test string config option."
type = "String"
default = "Lorem Ipsum"
